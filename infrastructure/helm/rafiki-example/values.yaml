#CREATE USER backend PASSWORD 'changeme';
#CREATE DATABASE backend OWNER backend;
rafiki:
  backend:
    nodeEnv: development
    logLevel: debug
    serviceUrls:
      PUBLIC_HOST: http://rafiki-backend
      OPEN_PAYMENTS_URL: http://rafiki-backend
      PAYMENT_POINTER_URL: http://rafiki-backend/.well-known/pay
      WEBHOOK_URL: http://cloud-nine-wallet/webhooks
      EXCHANGE_RATES_URL: http://cloud-nine-wallet/prices
      QUOTE_URL: http://cloud-nine-wallet/quotes
    redis:
      host: "rafiki-example-redis-master"
      port: 6379
      tlsCaFile: ''
      tlsCertFile: ''
      tlsKeyFile: ''
    postgresql:
      host: "rafiki-example-postgresql"
      port: 5432
      username: "backend"
      database: "backend"
      password: "changeme"
    port:
      admin: 3001
      connector: 3002
      openPayments: 80
    ilp:
      address: test.cloud-nine-wallet # override this value
      streamSecret: "BjPXtnd00G2mRQwP/8ZpwyZASOch5sUXT5o0iR5b5wU=" # override this value
      slippage: 0.01
    key:
      id: rafiki
      file: ''
    quoteSignatureSecret: "overridethisValue"
    withdrawalThrottleDelay: ''
    lifetime: 
      exchangeRate: 15000
      quote: 300000
      webhook: 200
    workers:
      incomingPayment: 1
      outgoingPayment: 4
      paymentPointer: 1
      webhook: 1
    workerIdle: 200
    image:
      repository: ghcr.io/interledger/rafiki-backend
      tag: 'v1.0.0-alpha.1'
      digest: ''
      pullPolicy: IfNotPresent
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 50%
    serviceAccount:
      # Specifies whether a service account should be created
      create: true
      # The name of the service account to use.
      # If not set and create is true, a name is generated using the fullname template
      name: ''
    securityContext:
      {}
      # privileged: true
    resources:
      limits:
        memory: 1Gi
        cpu: 450m
      requests:
        memory: 800Mi
        cpu: 300m

  auth:
    postgresql:
      host: "rafiki-example-postgresql"
      port: 5432
      username: "auth"
      database: "auth"
      password: "changeme"
    port:
      admin: 3003
      auth: 3006
      introspection: 3007
    identityServer:
      domain: "http://cloud-nine-wallet/idp"
      secret: "changeme"
    interaction:
      incomingPayment: "false"
      quote: "false"
    grant:
      waitSeconds: 5
    accessToken:
      deletionDays: 30
      expirySeconds: 600
    cookieKey: ''
    workers: 
      cleanup: 1
    image:
      repository: ghcr.io/interledger/rafiki-auth
      tag: 'v1.0.0-alpha.1'
      digest: ''
      pullPolicy: IfNotPresent
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 50%
    serviceAccount:
      # Specifies whether a service account should be created
      create: true
      # The name of the service account to use.
      # If not set and create is true, a name is generated using the fullname template
      name: ''
    securityContext:
      {}
    resources:
      limits:
        memory: 1Gi
        cpu: 450m
      requests:
        memory: 800Mi
        cpu: 300m

  frontend:
    port: 3010
    image:
      repository: ghcr.io/interledger/rafiki-frontend
      tag: 'v1.0.0-alpha.1'
      digest: ''
      pullPolicy: IfNotPresent
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 50%
    serviceAccount:
      # Specifies whether a service account should be created
      create: true
      # The name of the service account to use.
      # If not set and create is true, a name is generated using the fullname template
      name: ''
    securityContext:
      {}
  #  resources:
  #    limits:
  #      memory: 1Gi
  #      cpu: 450m
  #    requests:
  #      memory: 800Mi
  #      cpu: 300m

postgresql:
  replication:
    enabled: false
  metrics:
    enabled: false
  primary:
    initdb:
      scripts:
        initialize_backend.sql: |
          CREATE USER backend PASSWORD 'changeme';
          CREATE DATABASE backend OWNER backend;
        initialize_auth.sql: |
          CREATE USER auth PASSWORD 'changeme';
          CREATE DATABASE auth OWNER auth;
    persistence:
      enabled: true

redis:
  auth:
    enabled: false
